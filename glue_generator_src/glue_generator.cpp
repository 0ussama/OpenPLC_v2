#include <iostream>
#include <fstream>
#include <string>

#include <string.h>
#include <stdlib.h>

using namespace std;

ifstream locatedVars;
ofstream glueVars;

void generateHeader()
{
	if (glueVars.is_open())
	{
		glueVars << 	"\
//-----------------------------------------------------------------------------\r\n\
// Copyright 2015 Thiago Alves\r\n\
// This file is part of the OpenPLC Software Stack.\r\n\
//\r\n\
// OpenPLC is free software: you can redistribute it and/or modify\r\n\
// it under the terms of the GNU General Public License as published by\r\n\
// the Free Software Foundation, either version 3 of the License, or\r\n\
// (at your option) any later version.\r\n\
//\r\n\
// OpenPLC is distributed in the hope that it will be useful,\r\n\
// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n\
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n\
// GNU General Public License for more details.\r\n\
//\r\n\
// You should have received a copy of the GNU General Public License\r\n\
// along with OpenPLC.  If not, see <http://www.gnu.org/licenses/>.\r\n\
//------\r\n\
//\r\n\
// This file is responsible for gluing the variables from the IEC program to\r\n\
// the OpenPLC memory pointers. It is automatically generated by the\r\n\
// glue_generator program. PLEASE DON'T EDIT THIS FILE!\r\n\
// Thiago Alves, May 2016\r\n\
//-----------------------------------------------------------------------------\r\n\
\r\n\
#include \"iec_std_lib.h\"\r\n\
\r\n\
TIME __CURRENT_TIME;\r\n\
\r\n\
//Internal buffers for I/O and memory. These buffers are defined in the\r\n\
//auto-generated glueVars.cpp file\r\n\
#define BUFFER_SIZE		100\r\n\
\r\n\
//Booleans\r\n\
IEC_BOOL *bool_input[BUFFER_SIZE][BUFFER_SIZE];\r\n\
IEC_BOOL *bool_output[BUFFER_SIZE][BUFFER_SIZE];\r\n\
\r\n\
//Ints\r\n\
IEC_SINT *sint_input[BUFFER_SIZE][BUFFER_SIZE];\r\n\
IEC_SINT *sint_output[BUFFER_SIZE][BUFFER_SIZE];\r\n\
IEC_INT *int_input[BUFFER_SIZE][BUFFER_SIZE];\r\n\
IEC_INT *int_output[BUFFER_SIZE][BUFFER_SIZE];\r\n\
IEC_DINT *dint_input[BUFFER_SIZE][BUFFER_SIZE];\r\n\
IEC_DINT *dint_output[BUFFER_SIZE][BUFFER_SIZE];\r\n\
IEC_LINT *lint_input[BUFFER_SIZE][BUFFER_SIZE];\r\n\
IEC_LINT *lint_output[BUFFER_SIZE][BUFFER_SIZE];\r\n\
\r\n\
//Unsigned Ints\r\n\
IEC_USINT *usint_input[BUFFER_SIZE][BUFFER_SIZE];\r\n\
IEC_USINT *usint_output[BUFFER_SIZE][BUFFER_SIZE];\r\n\
IEC_UINT *uint_input[BUFFER_SIZE][BUFFER_SIZE];\r\n\
IEC_UINT *uint_output[BUFFER_SIZE][BUFFER_SIZE];\r\n\
IEC_UDINT *udint_input[BUFFER_SIZE][BUFFER_SIZE];\r\n\
IEC_UDINT *udint_output[BUFFER_SIZE][BUFFER_SIZE];\r\n\
IEC_ULINT *ulint_input[BUFFER_SIZE][BUFFER_SIZE];\r\n\
IEC_ULINT *ulint_output[BUFFER_SIZE][BUFFER_SIZE];\r\n\
\r\n\
//Floats\r\n\
IEC_REAL *float_input[BUFFER_SIZE][BUFFER_SIZE];\r\n\
IEC_REAL *float_output[BUFFER_SIZE][BUFFER_SIZE];\r\n\
IEC_LREAL *double_input[BUFFER_SIZE][BUFFER_SIZE];\r\n\
IEC_LREAL *double_output[BUFFER_SIZE][BUFFER_SIZE];\r\n\
\r\n\
\r\n\
#define __LOCATED_VAR(type, name, ...) type __##name;\r\n\
#include \"LOCATED_VARIABLES.h\"\r\n\
#undef __LOCATED_VAR\r\n\
#define __LOCATED_VAR(type, name, ...) type* name = &__##name;\r\n\
#include \"LOCATED_VARIABLES.h\"\r\n\
#undef __LOCATED_VAR\r\n\
\r\n\
void glueVars()\r\n\
{\r\n";

	}

	else
	{
		cout << "Error opening glueVars.cpp file!" << endl;
	}
}

int parseIecVars(char *varName, char *varType)
{
	string line;
	char buffer[1024];

    if (locatedVars.is_open())
    {
    	if (getline(locatedVars, line))
    	{
    		int i = 0, j = 0;
			strncpy(buffer, line.c_str(), 1024);
            for (i = 0; buffer[i] != '('; i++);
            i++;

            while (buffer[i] != ',')
            {
            	varType[j] = buffer[i];
            	i++; j++;
            	varType[j] = '\0';
            }
            i++; j=0;

            while (buffer[i] != ',')
            {
            	varName[j] = buffer[i];
            	i++; j++;
            	varName[j] = '\0';
            }

            return 1;
    	}

    	else
    	{
    		return 0;
    	}
    }

    else
    {
    	cout << "Error opening located variables file!" << endl;
    	return 0;
    }
}

void findPositions(char *varName, int *pos1, int *pos2)
{
	int i=4, j=0;
	char tempBuffer[100];

	while (varName[i] != '_')
	{
		tempBuffer[j] = varName[i];
		i++; j++;
		tempBuffer[j] = '\0';
	}
	*pos1 = atoi(tempBuffer);
	j = 0; i++;

	while (varName[i] != '\0')
	{
		tempBuffer[j] = varName[i];
		i++; j++;
		tempBuffer[j] = '\0';
	}
	*pos2 = atoi(tempBuffer);
}

void glueVar(char *varName, char *varType)
{
	cout << "varName: " << varName << "\tvarType: " << varType << endl;
	int pos1, pos2;

	findPositions(varName, &pos1, &pos2);

	if (varName[2] == 'I')
	{
		//INPUT
		switch (varName[3])
		{
			case 'X':
				glueVars << "\tbool_input[" << pos1 << "][" << pos2 << "] = " << varName << ";\r\n";
				break;
			case 'W':
				glueVars << "\tint_input[" << pos1 << "][" << pos2 << "] = " << varName << ";\r\n";
				break;
		}
	}
	else if (varName[2] == 'Q')
	{
		//OUTPUT
		switch (varName[3])
		{
			case 'X':
				glueVars << "\tbool_output[" << pos1 << "][" << pos2 << "] = " << varName << ";\r\n";
				break;
			case 'W':
				glueVars << "\tint_output[" << pos1 << "][" << pos2 << "] = " << varName << ";\r\n";
				break;
		}
	}
	else if (varName[2] == 'M')
	{
		//MEMORY
		//pending...
	}
}

void generateBottom()
{
	glueVars << "}";
}

int main()
{
	char iecVar_name[100];
	char iecVar_type[100];
	locatedVars.open("LOCATED_VARIABLES.h", ios::in);
	glueVars.open("glueVars.cpp", ios::trunc);

	generateHeader();

	while (parseIecVars(iecVar_name, iecVar_type))
	{
		glueVar(iecVar_name, iecVar_type);
	}

	generateBottom();

	return 0;
}
